type vec2[float, float]
type vec3[float, float, float]
type vec4[float, float, float, float]

type mat3[vec3, vec3, vec3]
type mat4[vec4, vec4, vec4, vec4]

type Ray {
    origin: vec3,
    direction: vec3
}

uniform iResolution: vec3
uniform iTime: float
uniform iTimeDelta: float
uniform iFrame: int
uniform iMouse: vec4
uniform iDate: vec4
uniform iSampleRate: float

extern normalize_vec3: vec3 -> vec3
extern cross: vec3 -> vec3

let add = fn a: float. fn b: float. a + b

entry main = fn frag_coord: vec2. 
    let v = (1.0 + 1.0) * 2.0 + 2.0 * 3.0 - -10.0 in
    let n = normalize_vec3 vec3[frag_coord.0, frag_coord.1, v] in
    let i = loop 12 in
        fn i: int.
            if i <= 0 then [false, i] else [true, i - 1]
    in
    vec4[n.0, n.1, n.2, 1.0].0